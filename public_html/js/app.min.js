var app = app || {};

(function(body){
    "use strict";

    app = {
        
        init: function()
        {
            this.tabs.init();
            this.swith.init();
            this.filter.init();
            this.dropdown.init();
            this.submenu.init();

            // this.map.init();
            // this.faq.morph();
            // this.fixmenu.init();
            // this.ajaxForm.init();
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    var $body = $('body'),
        _this;

    app.ajaxForm = {

        config: {
            form_class: '.form-ajax',
            form_reset: 'form-reset',
            link_class: '.js-request-link',
            error_class: 'error',
            error_message: 'form__error-message',
            error_message_class: 'j-error-message',
            error_message_addclass: 'show',
            form_label: '.form__wrapper',
            checkbox_label: 'checkbox__label'
        },

        callback_stack: {},

        extend: function(config)
        {
            _this = this;

            if (typeof config !== 'undefined')
            {
                var x;
                for (x in config)
                {
                    if (typeof _this.config[x] !== 'undefined')
                        _this.config[x] = config[x];
                }
            }
        },

        default_handler: function(form, response)
        {
            _this = this;

            if (response.status)
            {
                if (response.hasOwnProperty('redirect_url'))
                {
                    window.location.href = response.redirect_url;
                }
            }
            else if (typeof response.errors !== 'undefined' || typeof response.error_message !== 'undefined')
            {
                var errors, error_message;

                if (typeof response.errors !== 'undefined')
                {
                    errors = response.errors;
                }

                if (typeof response.error_message !== 'undefined')
                {
                    error_message = response.error_message;
                }

                _this.validation(form, errors, response.error_message);
            }

            if (response.hasOwnProperty('open_popup'))
            {
                if ($('body').find('.popup.is-open').length)
                {
                    $.popup.close($('body').find('.popup.is-open'), function(){
                        $.popup.open(response.open_popup);
                    });
                }
                else
                {
                    $.popup.open(response.open_popup);
                }
            }

            if (response.hasOwnProperty('message'))
            {
                $.popup.message(response.title, response.message);
            }

        },

        validation: function(form, errors, error_message)
        {
            _this = this;

            form.find('.' + _this.config.error_class).removeClass(_this.config.error_class);
            form.find('.' + _this.config.error_message).remove();
            form.find('.' + _this.config.error_message_class).removeClass(_this.config.error_message_addclass);

            var fieldName, field;

            setTimeout(function() {
                if (typeof error_message !== 'undefined' && error_message !== '')
                {
                    form.find('.' + _this.config.error_message_class).html(error_message);
                    form.find('.' + _this.config.error_message_class).addClass(_this.config.error_message_addclass);
                }

                if (typeof errors !== 'undefined' && errors !== '')
                {
                    for(fieldName in errors)
                    {
                        if (form.find('input[name="'+fieldName+'"]').length > 0)
                        {
                            field = form.find('input[name="'+fieldName+'"]');
                        }

                        if (form.find('select[name="'+fieldName+'"]').length > 0)
                        {
                            field = form.find('select[name="'+fieldName+'"]');
                        }

                        if (form.find('textarea[name="'+fieldName+'"]').length > 0)
                        {
                            field = form.find('textarea[name="'+fieldName+'"]');
                        }

                        if (field.closest('.' + _this.config.checkbox_label).length > 0)
                        {
                            field = field.closest('.' + _this.config.checkbox_label);
                        }

                        if (typeof field !== 'undefined')
                        {
                            field.addClass(_this.config.error_class);
                            field.closest(_this.config.form_label).append('<div class="' + _this.config.error_message + '">' + errors[fieldName] + '</div>');
                        }
                    }
                }
            }, 10);
        },

        upload: function()
        {
            _this = this;

            $body.on('submit', '.form-file-upload', function(e) {
                return AIM.submit(this, {
                    onStart: function()
                    {

                    },
                    onComplete: function(result)
                    {
                        if (typeof result === 'object' && result.status === true && result.hasOwnProperty('photo_url'))
                        {

                        }
                    }
                });
            });

            $(document).on('change', '.upload_button_onchange', function(){
                if ($(this).closest('.upload_button').find('.upload_button_field').length > 0)
                {
                    $(this).closest('.upload_button').find('.upload_button_field').html($(this).val());
                }
            });
        },

        send: function(action, method, data, cb, err)
        {

            if (typeof cb !== 'function') {
                cb = function() {};
            }

            if (typeof err !== 'function') {
                err = function() {};
            }

            try {

                $.ajaxSetup({
                    headers: {
                        'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                    }
                });

                $.ajax({
                    url: action,
                    type: method,
                    data: data,
                    contentType: false,
                    processData: method.toLowerCase() == 'get',
                    success: cb,
                    error: err,
                    dataType: 'JSON'
                });

            } catch(e){}

        },

        initLink: function()
        {
            _this = this;

            $body.on('click', _this.config.link_class, function(e) {
                e.preventDefault ? e.preventDefault() : e.returnValue = false;

                var link = $(this);

                if (link.data('is-busy')) {
                    return;
                }

                link.data('is-busy', true);

                var action = ($(this).attr('href')) || $(this).data('action'),
                    method = ($(this).data('method')) || 'get',
                    data = {};

                _this.send(
                    action,
                    method,
                    data,
                    function(response)
                    {
                        if (link.data('callback') && _this.callback_stack.hasOwnProperty(link.data('callback')))
                        {
                            _this.callback_stack[link.data('callback')](link, response);
                        }
                        else
                        {
                            _this.default_handler(link, response);
                        }

                        if (response.status === true)
                        {

                        }

                        link.data('is-busy', false);
                    },
                    function(response)
                    {
                        _this.default_handler(link, response);
                        link.data('is-busy', false);
                    }
                );
            });
        },

        initForm: function()
        {
            _this = this;

            $body.on('submit', _this.config.form_class, function(e) {
                e.preventDefault ? e.preventDefault() : e.returnValue = false;

                var form    = $(this),
                    action  = form.attr('action'),
                    method  = (form.attr('method') || 'post'),
                    data    = !!window.FormData ? new FormData(form[0]) : form.serialize();

                if (form.data('is-busy')) {
                    return;
                }

                form.data('is-busy', true);

                if (typeof button !== 'undefined')
                {
                    if (button.data('loading'))
                    {
                        button.data('original', button.text());
                        button.text(button.data('loading'));
                    }

                    button.addClass('preload');
                }

                if (form.data('precallback') && _this.callback_stack.hasOwnProperty(form.data('precallback'))) {
                    if(!_this.callback_stack[form.data('precallback')](form))
                    {
                        return false;
                    }
                }

                _this.send(
                    action,
                    method,
                    data,
                    function(response)
                    {
                        if (form.data('callback') && _this.callback_stack.hasOwnProperty(form.data('callback')))
                        {
                            _this.callback_stack[form.data('callback')](form, response);
                        }
                        else
                        {
                            _this.default_handler(form, response);
                        }

                        if (response.status === true)
                        {
                            if (form.hasClass(_this.config.form_reset))
                            {
                                form.find('.' + _this.config.error_class).removeClass(_this.config.error_class);
                                form.get(0).reset();
                            }
                        }

                        if (typeof button !== 'undefined')
                        {
                            if (button.data('original'))
                            {
                                button.text(button.data('original'));
                            }

                            button.removeClass('preload');
                        }

                        form.data('is-busy', false);
                    },
                    function(response)
                    {
                        _this.default_handler(form, response);
                        form.data('is-busy', false);
                    }
                );
            });
        },

        init: function(config)
        {
            this.extend(config);

            this.initForm();
            this.initLink();
        }
    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

	var _this;

	app.ajaxForm = {

        config: {
            form_class: '.form-ajax',
            form_reset: 'form-reset',
            link_class: '.js-request-link',
            error_class: 'error',
            error_message: 'form__error-message',
            error_message_class: 'j-error-message',
            error_message_addclass: 'show',
            form_label: '.form__wrapper',
            checkbox_label: 'checkbox__label'
        },

		callback_stack: {},

		extend: function(config)
		{
			_this = this;

			if (typeof config !== 'undefined')
			{
				var x;
				for (x in config)
				{
					if (typeof _this.config[x] !== 'undefined')
						_this.config[x] = config[x];
				}
			}
		},

		default_handler: function(form, response)
		{
			_this = this;

            if (response.status)
            {
                if (response.hasOwnProperty('redirect_url'))
                {
                    window.location.href = response.redirect_url;
                }
            }
            else if (typeof response.errors !== 'undefined' || typeof response.error_message !== 'undefined')
            {
                var errors, error_message;

                if (typeof response.errors !== 'undefined')
                {
                    errors = response.errors;
                }

                if (typeof response.error_message !== 'undefined')
                {
                    error_message = response.error_message;
                }

                _this.validation(form, errors, error_message);
            }
			
            if (response.hasOwnProperty('run_script'))
            {
                if (typeof(window[response.run_script]) == 'function')
                {
                    window[response.run_script]();
                }
            }

            if (response.hasOwnProperty('open_popup'))
            {
            	if ($('body').find('.popup.is-open').length)
            	{
            		$.popup.close($('body').find('.popup.is-open'), function(){
            			$.popup.open(response.open_popup);
            		});
            	}
            	else
            	{
            		$.popup.open(response.open_popup);
            	}
            }

			if (response.hasOwnProperty('message'))
			{
				$.popup.message(response.title, response.message);
			}

		},

		validation: function(form, errors, error_message)
        {
            _this = this;

            form.find('.' + _this.config.error_class).removeClass(_this.config.error_class);
            form.find('.' + _this.config.error_message_class).removeClass(_this.config.error_message_addclass);
            
            var fieldName, field;

            setTimeout(function() {
                if (typeof error_message !== 'undefined' && error_message !== '')
                {
                    form.find('.' + _this.config.error_message_class).html(error_message);
                    form.find('.' + _this.config.error_message_class).addClass(_this.config.error_message_addclass);
                }

                if (typeof errors !== 'undefined' && errors !== '')
                {
                    for(fieldName in errors)
                    {
                        if (form.find('input[name="'+fieldName+'"]').length > 0)
                        {
                            field = form.find('input[name="'+fieldName+'"]');
                        }

                        if (form.find('select[name="'+fieldName+'"]').length > 0)
                        {
                            field = form.find('select[name="'+fieldName+'"]');
                        }

                        if (form.find('textarea[name="'+fieldName+'"]').length > 0)
                        {
                            field = form.find('textarea[name="'+fieldName+'"]');
                        }

                        if (field.closest('.' + _this.config.checkbox_label).length > 0)
                        {
                            field = field.closest('.' + _this.config.checkbox_label);
                        }

                        if (typeof field !== 'undefined')
                        {
                            field.addClass(_this.config.error_class);
                            field.closest(_this.config.form_label).append('<div class="' + _this.config.error_message + '">' + errors[fieldName] + '</div>');
                        }
                    }
                }
            }, 10);
        },

		upload: function()
		{
			_this = this;

			$('body').on('submit', '.form-file-upload', function(e) {
				return AIM.submit(this, {
					onStart: function()
					{

					},
					onComplete: function(result)
					{
						if (typeof result === 'object' && result.status === true && result.hasOwnProperty('photo_url'))
						{

						}
					}
				});
			});
			
			$(document).on('change', '.upload_button_onchange', function(){
				if ($(this).closest('.upload_button').find('.upload_button_field').length > 0)
				{
					$(this).closest('.upload_button').find('.upload_button_field').html($(this).val());
				}
			});
		},

		send: function(action, method, data, cb, err)
		{

			if (typeof cb !== 'function')
			{
				cb = function() {};
			}

			if (typeof err !== 'function')
			{
				err = function() {};
			}

			try {
			
				$.ajax({
					url: action,
					type: method,
					data: data,
					contentType: false,
					processData: method.toLowerCase() == 'get',
					success: cb,
					error: err,
					dataType: 'JSON'
				});

			} catch(e) {}

		},

		initLink: function()
		{
			_this = this;

			$('body').on('click', _this.config.link_class, function(e) {
				e.preventDefault ? e.preventDefault() : e.returnValue = false;
				
				var link = $(this);

				if (link.data('is-busy')) {
					return;
				}

				link.data('is-busy', true);

				var action = ($(this).attr('href')) || $(this).data('action'),
					method = ($(this).data('method')) || 'get',
					data = {};

				_this.send(
					action,
					method,
					data,
					function(response)
					{
						if (link.data('callback') && _this.callback_stack.hasOwnProperty(link.data('callback')))
						{
							_this.callback_stack[link.data('callback')](link, response);
						}
						else
						{
							_this.default_handler(link, response);
						}

						if (response.status === true)
						{
							
						}

						link.data('is-busy', false);
					},
					function(response)
					{
						_this.default_handler(link, response);
						link.data('is-busy', false);
					}
				);
			});
		},

 		initForm: function()
        {
            _this = this;

            $('body').on('submit', _this.config.form_class, function(e) {
                e.preventDefault ? e.preventDefault() : e.returnValue = false;

                var form    = $(this),
                    action  = form.attr('action'),
                    method  = (form.attr('method') || 'post'),
                    data    = !!window.FormData ? new FormData(form[0]) : form.serialize();

                if (form.data('is-busy')) {
                    return;
                }

                form.data('is-busy', true);

                if (typeof button !== 'undefined')
                {
                    if (button.data('loading'))
                    {
                        button.data('original', button.text());
                        button.text(button.data('loading'));
                    }

                    button.addClass('preload');
                }

                if (form.data('precallback') && _this.callback_stack.hasOwnProperty(form.data('precallback'))) {
                    if(!_this.callback_stack[form.data('precallback')](form))
                    {
                        return false;
                    }
                }

                _this.send(
                    action,
                    method,
                    data,
                    function(response)
                    {
                        if (form.data('callback') && _this.callback_stack.hasOwnProperty(form.data('callback')))
                        {
                            _this.callback_stack[form.data('callback')](form, response);
                        }
                        else
                        {
                            _this.default_handler(form, response);
                        }

                        if (response.status === true)
                        {
                            if (form.hasClass(_this.config.form_reset))
                            {
                                form.find('.' + _this.config.error_class).removeClass(_this.config.error_class);
                                form.get(0).reset();
                            }
                        }

                        if (typeof button !== 'undefined')
                        {
                            if (button.data('original'))
                            {
                                button.text(button.data('original'));
                            }

                            button.removeClass('preload');
                        }

                        form.data('is-busy', false);
                    },
                    function(response)
                    {
                        _this.default_handler(form, response);
                        form.data('is-busy', false);
                    }
                );
            });
        },

		init: function(config)
		{
			this.extend(config);
			
			this.initForm();
			this.initLink();
		}
	};

	app.ajaxForm.init();

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.carousel = {

        init: function() {
            if ($('.j-carousel').length && $('.j-carousel').find('.slick-slide').length)
            {
                var count = 4, classname = 'carousel';

                $('.j-carousel').each(function(){
                    count = 4;
                    classname = 'carousel';

                    if ($(this).data('viewcount'))
                    {
                        count = parseInt($(this).data('viewcount'));
                    }

                    if ($(this).data('classname'))
                    {
                        classname = $(this).data('classname');
                    }

                    $(this).slick({
                        infinite: true,
                        dots: false,
                        draggable: true,
                        speed: 170,
                        slidesToShow: count,
                        slidesToScroll: 1,
                        prevArrow: '<button type="button" class="'+classname+'__navigation '+classname+'__navigation_prev slick-prev"></button>',
                        nextArrow: '<button type="button" class="'+classname+'__navigation '+classname+'__navigation_next slick-next"></button>',
                        responsive: [
                            {
                                breakpoint: 1024,
                                settings: {
                                    slidesToShow: 3,
                                    slidesToScroll: 3,
                                    infinite: true,
                                    dots: true
                                }
                            },
                            {
                                breakpoint: 600,
                                settings: {
                                    slidesToShow: 2,
                                    slidesToScroll: 2
                                }
                            },
                            {
                                breakpoint: 480,
                                settings: {
                                    slidesToShow: 1,
                                    slidesToScroll: 1
                                }
                            }
                        ]
                    });
                });
            }
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.dropdown = {

        init: function()
        {
            var $dropdown;

            $('body').on('click', '.j-dropdown-trigger', function(e){
                e.preventDefault();

                $dropdown = $(this).closest('.j-dropdown');

                if (!$dropdown.hasClass('is-open'))
                {
                    $dropdown.addClass('is-open');

                    setTimeout(function(){
                        $dropdown.addClass('is-animate');
                    }, 10);
                }
                else
                {
                    $dropdown.removeClass('is-animate');

                    setTimeout(function(){
                        $dropdown.removeClass('is-open');
                    }, 250);  
                }
            });
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.filter = {

        init: function()
        {
            var $filter;

            $('body').on('click', function(e){
                if ($('.j-filter-dropdown.is-open').length)
                {
                    if (!$(e.target).closest('.j-filter').length && !$(e.target).hasClass('j-filter'))
                    {
                        $filter = $('.j-filter-dropdown.is-open');
                        $filter.removeClass('is-animate');

                        setTimeout(function() {
                            $filter.removeClass('is-open');
                            $filter.data('is-busy', false);
                        }, 250);
                    }
                }
            });

            $('body').on('click', '.j-filter-clear', function(e){
                e.preventDefault();
                $filter = $(this).closest('.j-filter');
                $filter.find('.j-filter-value').html('');

                $filter.removeClass('is-checked');
            });

            $('body').on('click', '.j-filter-trigger', function(e){
                e.preventDefault();

                if (!$(e.target).hasClass('j-filter-clear'))
                {
                    $filter = $(this).closest('.j-filter').find('.j-filter-dropdown');
                    
                    if (!$filter.data('is-busy'))
                    {
                        $filter.data('is-busy', true);

                        if ($filter.hasClass('is-open'))
                        {
                            $filter.removeClass('is-animate');

                            setTimeout(function() {
                                $filter.removeClass('is-open');
                                $filter.data('is-busy', false);
                            }, 250);
                        }
                        else
                        {
                            $filter.addClass('is-open');
                            
                            setTimeout(function() {
                                $filter.addClass('is-animate');
                                $filter.data('is-busy', false);
                            }, 10);
                        }
                    }
                }
            });
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.fixmenu = {
        
        fixMenu: function($menu, t) {

            if (t >= (159)) {
                if (!$menu.hasClass('_sticked')) {
                    $menu.addClass('_sticked');
                }
            }
            else {
                if ($menu.hasClass('_sticked')) {
                    $menu.removeClass('_sticked');
                }
            }
            
        },

        init: function() {
            var $element = $('#navigation'),
                that = this;

            that.fixMenu($element, $(window).scrollTop());

            $(window).on('scroll', function(){
                that.fixMenu($element, $(window).scrollTop());
            });
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.gallery = {

        init: function() {

            if ($('.j-gallery').length) {
                $('.j-gallery').each(function(){
                    $(this).magnificPopup({
                        type: 'image',
                        delegate: 'a.zoom',
                        removalDelay: 500,
                        fixedContentPos: false,
                        closeOnBgClick: true,
                        gallery: {
                            enabled: true
                        },
                        callbacks: {
                             open: function() {
                                $('body').addClass('noscroll');
                             },
                             close: function() {
                                 $('body').removeClass('noscroll');
                             }
                        }
                    });
                });

                $('.popup-youtube, .popup-vimeo, .popup-gmaps').magnificPopup({
                    disableOn: 700,
                    type: 'iframe',
                    mainClass: 'mfp-fade',
                    removalDelay: 160,
                    preloader: false,
                    fixedContentPos: false
                });
            }
            
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.map = {
        
        _mapObject: null,

        _geoObject: null,

        getData: function($element) {
            var x, wrap_id = null, coords = null;

            if ($element.data('coords')) {
                coords = $element.data('coords').split(',');

                for (x in coords) {
                    coords[x] = $.trim(coords[x]);
                }

                if (coords.length !== 2) {
                    coords = null;
                }
            }

            if ($element.attr('id')) {
                wrap_id = $element.attr('id');
            }

            return {
                id: wrap_id,
                coords: coords
            }
        },

        drowMap: function($element) {
            
            var that = this, data = this.getData($element);

            ymaps.ready(function(){

                that._mapObject = new ymaps.Map(data.id, {
                    center: [data.coords[0], data.coords[1]],
                    zoom: 13,
                    controls: ['zoomControl', 'searchControl', 'typeSelector', 'fullscreenControl']
                });

                // "fullscreenControl" - кнопка разворачивания карты на весь экран control.FullscreenControl;
                // "geolocationControl" - кнопка определения местоположения пользователя control.GeolocationControl;
                // "routeEditor" - кнопка включения и отключения поведения "редактор маршрута" control.RouteEditor;
                // "rulerControl" - кнопка включения и отключения поведения "линейка" control.RulerControl;
                // "searchControl" - панель поиска control.SearchControl;
                // "trafficControl" - панель пробок control.TrafficControl;
                // "typeSelector" - панель переключения типа карты control.TypeSelector;
                // "zoomControl" - ползунок масштаба control.ZoomControl;
                // "smallMapDefaultSet" - базовый набор элементов управления, оптимизированный для карт небольшого размера и экранов телефонов. Состоит из элементов управления "zoomControl", "searchControl", "typeSelector", "geolocationControl" и "fullscreenControl". В этом наборе все элементы управления минимизированы до кнопок с пиктограммами.
                // "mediumMapDefaultSet" - набор элементов управления, оптимизированный для карт среднего размера и экранов планшетов. Помимо базового набора элементов управления (см. выше), добавляет дополнительно элементы управления "rulerControl" и "trafficControl".
                // "largeMapDefaultSet" - набор элементов управления, оптимизированный для карт большого размера и экранов десктопных компьютеров. Отличается от набора "mediumMapDefaultSet" наличием элемента управления "routeEditor" и отсутствием элемента управления "fullScreen";
                // "default" - набор элементов управления по умолчанию; синоним для набора "mediumMapDefaultSet".

                that._mapObject.behaviors.disable('scrollZoom');

                that._mapObject.controls.get('zoomControl').options.set('size', 'small');
                that._mapObject.controls.get('zoomControl').options.set('position', { right: 10, top: 50 });

                that._mapObject.geoObjects
                    .add(new ymaps.Placemark([data.coords[0], data.coords[1]], {}, {
                        preset: 'islands#dotIcon',
                        iconColor: '#735184'
                    }))

            });

        },

        init: function() {
            var that = this;

            if ($('.j-map').length) {
                $('.j-map').each(function(){
                    that.drowMap($(this));
                });
            }
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.morph = {

        init: function() {
            function morphDropdown( element ) {
                this.element = element;
                this.mainNavigation = this.element.find('.main-nav');
                this.mainNavigationItems = this.mainNavigation.find('.has-dropdown');
                this.dropdownList = this.element.find('.dropdown-list');
                //...
                
                this.bindEvents();
            }

            morphDropdown.prototype.bindEvents = function() {
                var self = this;
                
                this.mainNavigationItems.mouseenter(function(event){
                    //hover over one of the nav items -> show dropdown
                    self.showDropdown($(this));
                }).mouseleave(function(){
                    //if not hovering over a nav item or a dropdown -> hide dropdown
                    if( self.mainNavigation.find('.has-dropdown:hover').length == 0 && self.element.find('.dropdown-list:hover').length == 0 ) self.hideDropdown();
                });
            };

            morphDropdown.prototype.showDropdown = function(item) {
                var selectedDropdown = this.dropdownList.find('#'+item.data('content')),
                    selectedDropdownHeight = selectedDropdown.innerHeight(),
                    selectedDropdownWidth = selectedDropdown.children('.content').innerWidth(),
                    selectedDropdownLeft = item.offset().left + item.innerWidth()/2 - selectedDropdownWidth/2;
             
                //update dropdown and dropdown background position and size
                this.updateDropdown(selectedDropdown, parseInt(selectedDropdownHeight), selectedDropdownWidth, parseInt(selectedDropdownLeft));
                
                //add the .active class to the selected .dropdown and .is-dropdown-visible to the .cd-morph-dropdown 
                //...
            };
             
            morphDropdown.prototype.updateDropdown = function(dropdownItem, height, width, left) {
                this.dropdownList.css({
                    '-moz-transform': 'translateX(' + left + 'px)',
                    '-webkit-transform': 'translateX(' + left + 'px)',
                    '-ms-transform': 'translateX(' + left + 'px)',
                    '-o-transform': 'translateX(' + left + 'px)',
                    'transform': 'translateX(' + left + 'px)',
                    'width': width+'px',
                    'height': height+'px'
                });
             
                this.dropdownBg.css({
                    '-moz-transform': 'scaleX(' + width + ') scaleY(' + height + ')',
                    '-webkit-transform': 'scaleX(' + width + ') scaleY(' + height + ')',
                    '-ms-transform': 'scaleX(' + width + ') scaleY(' + height + ')',
                    '-o-transform': 'scaleX(' + width + ') scaleY(' + height + ')',
                    'transform': 'scaleX(' + width + ') scaleY(' + height + ')'
                });
            };

        }

    };

})(document.body);
(function($) {
    "use strict";

    var that, top, changeItem, scrollToAnchor, $target, $element, $current, $navigationMap, $navigation = $('#navigation'), $hasScroll = $('html, body');
    var is_mobile = $(window).width() <= 667;

    $navigationMap = $('.j-section').map(function(){
        return {
            offset: $(this).offset().top,
            element: $(this)
        }
    });

    changeItem = function(scrollTop) {
        $element = null;

        $navigationMap.map(function(){
            that = $(this)[0];
            if (that.offset < scrollTop) {
                $element = that.element; 
            }
        })

        if ($element !== null && $element.data('screen')) {
            $current = $navigation.find('.j-navigation[href="#' + $element.data('screen') + '"]');

            if (!$current.hasClass('_current')) {
                $navigation.find('.j-navigation._current').removeClass('_current');
                $current.addClass('_current');
            }
        }
    }

    scrollToAnchor = function(hash, animate) {
        $target = $(hash + '-anchor');

        if ($target.length)
        {
            is_mobile = $(window).width() <= 667;
            top = $target.offset().top;

            if (is_mobile) {
                top = top - 100
            }

            if (animate) {
                $hasScroll.stop().animate({ 'scrollTop': top }, 'medium', 'easeInOutCirc');
            }
            else {
                $hasScroll.scrollTop(top);
            }
        }
    }

    $('.j-navigation').on('click', function(e) {
        scrollToAnchor(this.hash, true);
    });

    setTimeout(function(){
        if (window.location.hash.length > 1) {
            scrollToAnchor(window.location.hash, false);
        }
    }, 150);

    $(window).scroll(function(){
        changeItem($(window).scrollTop())
    });
})(jQuery);
var app = app || {};

(function(body){
    "use strict";

    app.pageup = {

        element: null,

        click: function()
        {
            this.element.on('click', function(e){
                e.preventDefault();
                
                $('html, body').stop().animate({ scrollTop: 0 }, "fast");

                return !1;
            });
        },

        check: function(sctop)
        {
            var _this = this;

            if (sctop > 150)
            {
                if (!_this.element.hasClass('is-show'))
                {
                    _this.element.addClass('is-show');
                }

                if (!_this.element.hasClass('is-animate'))
                {
                    setTimeout(function(){
                        _this.element.addClass('is-animate');
                    }, 10);
                }
            }
            else
            {
                _this.element.removeClass('is-animate');

                setTimeout(function(){
                    _this.element.removeClass('is-show');
                }, 150);
            }
        },

        init: function()
        {
            var _this = this;

            _this.element = $('.j-page-up');

            _this.check($(window).scrollTop());

            $(window).on('scroll', function(){
                _this.check($(window).scrollTop());
            });

            _this.click();
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.preload = {

        preload: function($image)
        {
            var url = $image.data('preload'), image = null;

            try {
                image = new Image();
                image.onload = function() {
                    $image.attr('src', url);
                };
                image.src = url;
            }
            catch (e) {
                $image.attr('src', url);
            }
            
            $image.removeAttr('width height');
            $image.data('preload', '');
        },

        init: function()
        {
            if ($('img[data-preload]').length)
            {
                var _this = this;
            
                $('img[data-preload]').each(function(){
                    (function($image){
                        _this.preload($image);
                    })($(this))
                });
            }
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.quantity = {

        config: {
            element: '.j-quantity',
            input: '.j-quantity-count',
            control: '.j-quantity-control',
            complete: null
        },

        element: null,

        extend: function(config)
        {
            var _this = this;

            if (typeof config !== 'undefined')
            {
                var x;
                for (x in config)
                {
                    if (typeof _this.config[x] !== 'undefined')
                        _this.config[x] = config[x];
                }
            }
        },

        setValue: function(quantity)
        {
            var min = 1, max = 100;

            if (this.element.data('min')) {
                min = this.element.data('min');   
            }
            
            if (this.element.data('max')) {
                max = this.element.data('max');   
            }

            if (quantity > max) {
                quantity = max;
            }
            
            if (quantity < min) {
                quantity = min;
            }

            this.element.find(this.config.input).val(quantity);

        },

        increase: function(quantity)
        {
            quantity += 1;

            this.setValue(quantity);
        },

        decrease: function(quantity)
        {
            if (quantity > 1) {
                quantity -= 1;
            }

            this.setValue(quantity);
        },

        callback: function()
        {
            if (typeof(this.element.data('product')) !== 'undefined' && typeof(this.config.complete) == 'function')
            {
                this.config.complete.call(null, this.element, this.element.data('product'));
            }
        },

        keys: function()
        {
            var _this = this, role = '';

            $('body').on('keydown', _this.config.input, function(e) {
                if ([38, 40].indexOf(e.keyCode) >= 0)
                {
                    e.preventDefault();

                    role = {
                        38: 'increase',
                        40: 'decrease'
                    };

                    _this.element = $(this).closest(_this.config.element);

                    _this[role[e.keyCode]](parseInt(_this.element.find(_this.config.input).val()));

                    _this.callback();

                    return false;
                }
            });
        },

        bind: function()
        {
            var _this = this, role = '';

            $('body').on('click', _this.config.control, function(e) {
                e.preventDefault();

                _this.element = $(this).closest(_this.config.element);

                role = $(this).data('role');
         
                if(['increase', 'decrease'].indexOf(role) >= 0)
                {
                    _this[role](parseInt(_this.element.find(_this.config.input).val()));
                }

                _this.callback();

                return !1;
            });
        },

        init: function(config)
        {
            if (typeof config !== 'undefined')
            {
                this.extend(config);
            }

            this.bind();
            this.keys();
        }

    };

})(document.body);

// this.quantity.init({
//     complete: function(element, id) {
//         // $(element).css({
//         //     'border': '1px solid lime'
//         // });

//         console.log("id :", id);
//     }
// });

// <div class="quantity j-quantity clearfix" data-product="1000" data-min="1" data-max="999">
//     <button type="button" class="quantity__control _decrease j-quantity-control" data-role="decrease"></button>
//     <input type="text" name="count[1000]" value="1" data-role="quantity-input" class="quantity__count j-quantity-count" maxlength="3" autocomplete="off">
//     <button type="button" class="quantity__control _increase j-quantity-control" data-role="increase"></button>
// </div>
var app = app || {};

;(function(body){
    "use strict";

    var _this;

    app.sandwich = {

        config: {
            keyHooks: !1,
            selector: '.js-sandwich-menu',
            wrapper: '.layout-wrapper',
            overlay: '.overlay'
        },

        extend: function(config)
        {
            _this = this;

            if (typeof config !== 'undefined')
            {
                var x;
                for (x in config)
                {
                    if (typeof _this.config[x] !== 'undefined')
                        _this.config[x] = config[x];
                }
            }
        },

        isOpen: function()
        {
            return $('body').hasClass('page-visible');
        },

        hide: function()
        {
            $('body').removeClass('page-open');

            setTimeout(function(){
                $('body').removeClass('page-visible');
            }, 10);

            $(this.config.overlay).css({
                'visibility': 'hidden'
            });
        },

        toggle: function()
        {
            if ($('body').hasClass('page-visible'))
            {
                $('body').removeClass('page-open');

                setTimeout(function(){
                    $('body').removeClass('page-visible');
                }, 200);
            }
            else
            {
                $('body').addClass('page-open');

                setTimeout(function(){
                    $('body').addClass('page-visible');
                }, 10);
            }

            var visibility = 'visible';

            if (!$('body').hasClass('page-open'))
            {
                visibility = 'hidden'
            }
            
            $(_this.config.overlay).css({
                'visibility': visibility
            });
        },

        sandwichTrigger: function()
        {
            _this = this;

            if (_this.config.keyHooks)
            {
                $('body').on('keydown', function(e) {
                    if(e.keyCode == 27 && _this.isOpen())
                    {
                        _this.toggle();
                    }
                });
            };

            $('body').on('click', _this.config.selector, function(e){
                e.preventDefault ? e.preventDefault() : e.returnValue = false;
                _this.toggle();
            });
        },

        overlayTrigger: function()
        {
            _this = this;

            $('body').on('click', _this.config.overlay, function(e){
                _this.hide();
            });
        },

        init: function(config)
        {
            this.extend(config);
            this.sandwichTrigger();
            this.overlayTrigger();
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.shoppingCart = {

        config: {
            add: '.j-cart-add',
            remove: '.j-cart-remove',
            count: '.watch-cart-count',
            amount: '.watch-cart-amount',
            discount: '.watch-cart-discount',
            container: '.j-button-container',
            toggle_class: 'in-cart',
            product: function($item) {
                return parseInt($item.data('product'));
            },
            timeout: 50,
            callback: null
        },

        extend: function(config)
        {
            var _this = this;

            if (typeof config !== 'undefined')
            {
                var x;
                for (x in config)
                {
                    if (typeof _this.config[x] !== 'undefined')
                        _this.config[x] = config[x];
                }
            }
        },

        callback: function($item, response)
        {
            if (typeof(this.config.callback) == 'function')
            {
                this.config.callback.call(this, $item, response);
            }
            else
            {
                if (typeof response.count !== 'undefined')
                {
                    $(this.config.count).html(response.count);

                    if (response.count > 0)
                    {
                        $item.closest(this.config.container).addClass(this.config.toggle_class);
                    }
                    else
                    {
                        $item.closest(this.config.container).removeClass(this.config.toggle_class);
                    }
                }
                else
                {
                    $item.closest(this.config.container).removeClass(this.config.toggle_class);
                }
                
                if (typeof response.amount !== 'undefined')
                {   
                    $(this.config.amount).html(this.convertMoney(response.amount));
                }

                if (typeof response.remove !== 'undefined')
                {
                    $item.closest(this.config.container).removeClass(this.config.toggle_class);
                }

                setTimeout(function(){
                    $item.data('blocked', false);
                }, this.config.timeout);
            }
        },

        convertMoney: function(n)
        {
            var c = 0,
                d = '',
                t = ' ',
                s = n < 0 ? "-" : "",
                i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "",
                j = (j = i.length) > 3 ? j % 3 : 0;

            return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
        },

        bind: function()
        {
            var _this = this;

            $('body').on('click', [_this.config.remove, _this.config.add].join(','), function(e){
                e.preventDefault();

                if (!$(this).data('blocked'))
                {
                    _this.request($(this));   
                }

                return false;
            });
        },

        request: function($item)
        {
            var _this = this;
            
            $item.data('blocked', true);

            var data = {};
            var action = '';
            var method = 'GET';

            if ($item.data('method'))
            {
                method = $item.data('method');
            }
            
            if ($item.data('action'))
            {
                action = $item.data('action');
            }
            
            if (!action && $item.attr('href'))
            {
                action = $item.attr('href');
            }

            if ($item.data('product'))
            {
                data['product'] = this.config.product($item);
            }
            
            $.ajax({
                url: action,
                data: data,
                type: method,
                cache: false,
                dataType: 'JSON',
                success: function(response)
                {
                    _this.callback($item, response);
                },
                error: function(response)
                {
                    $item.data('blocked', false);
                    console.log('error: ', response)
                }
            });
        },

        init: function(config)
        {
            if (typeof config !== 'undefined')
            {
                this.extend(config);
            }

            this.bind();
        }

    };

})(document.body);

// this.shoppingCart.init({
//     add: '.j-shopping-cart-add',
//     remove: '.j-shopping-cart-remove'
// });

// <a href="/cart/remove?product=10&backuri=xx" data-action="/cart/remove" data-product="{$product.id}" data-method="POST|GET" class="button remove j-cart-remove" title="Удалить из корзины">Удалить из корзины</a>
// <a href="/cart/add?product=10&backuri=xx" data-action="/cart/remove" data-product="{$product.id}" data-method="POST|GET" class="button add j-cart-add" title="Добавить в корзину">Добавить в корзину</a>

var app = app || {};

(function(body){
    "use strict";

    app.slider = {

        init: function() {
            if ($('.j-slider').length && $('.j-slider').find('.slick-slide').length)
            {
                var count = 1, classname = 'slider', prefix = 'slider', $slider = '', width = $(window).width(), options = {};

                $('.j-slider').each(function(){
                    count = 1;
                    classname = 'slider';

                    if ($(this).data('prefix')) {
                        prefix = $(this).data('prefix');
                    }

                    options = {
                        fade: true,
                        dots: true,
                        speed: 500,
                        infinite: true,
                        autoplay: false,
                        draggable: false,
                        autoplaySpeed: 6500,
                        pauseOnHover: false,
                        useTransform: false,
                        variableWidth: false,
                        cssEase: 'linear',
                        responsive: [
                            {
                                breakpoint: 950,
                                settings: {
                                    dots: false,
                                    autoplay: true,
                                    draggable: true
                                }
                            }
                        ]
                    };
                    
                    $slider = $(this);

                    if ($slider.data('viewcount'))
                    {
                        count = parseInt($slider.data('viewcount'));
                    }

                    $slider.on('beforeChange', function(event, slick, currentSlide, nextSlide){
                        console.log(currentSlide, nextSlide);
                        
                        var $current = $(slick.$slides[currentSlide]);
                        var $next = $(slick.$slides[nextSlide]);
                        // $next.find('.j-after-slide').removeClass('is-show is-animate');
                    });

                    $slider.on('afterChange', function(event, slick, currentSlide){
                        var $current = $(slick.$slides[currentSlide]);
                        $current.find('.j-after-slide').addClass('is-show');
                        
                        setTimeout(function(){
                            $current.find('.j-after-slide').addClass('is-animate');
                        }, 10);
                    });

                    if ($slider.hasClass('j-slider-calc'))
                    {
                        $slider.find('.slick-slide').css({
                            'width': width + 'px'
                        });
                    }

                    if ($slider.data('classname'))
                    {
                        classname = $slider.data('classname');
                    }
                    
                    if (!$slider.hasClass('j-disable-navigation'))
                    {
                        options['prevArrow'] = '<button type="button" class="' + prefix + '__nav _prev slick-prev"></button>';
                        options['nextArrow'] = '<button type="button" class="' + prefix + '__nav _next slick-next"></button>';
                    }
                    else
                    {
                        options['arrows'] = false;
                    }

                    $slider.slick(options);
                });
            }
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.submenu = {

        init: function()
        {
            var $submenu;

            $('body').on('mouseenter', '.j-submenu', function(e){
                $submenu = $(this).find('.submenu');

                if ($submenu.length && !$submenu.hasClass('is-animate'))
                {
                    $submenu.addClass('is-open');

                    setTimeout(function(){
                        $submenu.addClass('is-animate');
                    }, 10);
                }
            });

            $('body').on('mouseleave', '.j-submenu', function(e){
                $submenu = $(this).find('.submenu');

                if ($submenu.length)
                {
                    $submenu.removeClass('is-animate');

                    setTimeout(function(){
                        $submenu.removeClass('is-open');
                    }, 250);
                }
            });
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.swith = {

        init: function()
        {
            var $swith;

            $('body').on('click', '.j-swith-trigger', function(e){
                e.preventDefault();

                $swith = $(this).closest('.j-swith');
                
                if (!$swith.data('is-busy'))
                {
                    $swith.data('is-busy', true);

                    if ($swith.hasClass('is-open'))
                    {
                        $swith.removeClass('is-animate');

                        setTimeout(function() {
                            $swith.removeClass('is-open');
                            $swith.data('is-busy', false);
                        }, 250);
                    }
                    else
                    {
                        $swith.addClass('is-open');
                        
                        setTimeout(function() {
                            $swith.addClass('is-animate');
                            $swith.data('is-busy', false);
                        }, 10);
                    }
                }
            });
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.tabs = {

        init: function() {
            var $wrapper = null, tab = '';

            $('body').on('click', '.j-tab-trigger', function(e){
                e.preventDefault();

                if (!$(this).hasClass('is-open'))
                {
                    tab = $(this).data('tab');

                    $wrapper = $(this).closest('.j-tab-wrapper');

                    $wrapper.find('.j-tab-trigger').removeClass(' is-current');
                    $wrapper.find('.j-tab-item').removeClass('is-open');

                    $wrapper.find('#tab-'+tab).addClass('is-open');
                    $(this).addClass(' is-current');
                }

                return !1;
            });
        }

    };

})(document.body);
var app = app || {};

(function(body){
    "use strict";

    app.toggle = {
        
        init: function() {
            
            var $toggle = null, text = '', hide = true, remove = false;

            $('body').on('click', '.j-toggle-trigger', function(e){
                e.preventDefault();

                $toggle = $(this).closest('.j-toggle').find('.j-toggle-item');

                if ($toggle)
                {
                    $toggle.toggleClass('is-show');
                }

                if ($toggle.hasClass('is-hidden'))
                {
                    $toggle.removeClass('is-hidden');
                }

                if ($(this).data('toggle-text')) {
                    text = $(this).data('toggle-text');
                }

                if (typeof($(this).data('remove')) !== 'undefined') {
                    remove = $(this).data('remove') == '0' ? false : ($(this).data('remove') == '1' ? true : false);
                }
                
                if (hide) {
                    $(this).hide();
                }
                
                if (remove) {
                    $(this).remove();
                }

                if (text) {
                    $(this).data('toggle-text', $(this).html());
                    $(this).html(text);
                }

                return false;
            })

        }

    };

})(document.body);

// <div class="j-toggle">
//     <div class="j-toggle-item"> content </div>
//     <span class="j-toggle-trigger" data-toggle-text="Скрыть..." data-hide="1" data-remove="1">Еще...</span>
// </div>
"use strict";

function sprintf(v) {
  var split = v.toString().split('.'), pad = "00", time = [], x = null;

  for (x in split) {
    time.push(pad.substring(0, 2 - split[x].toString().length) + split[x]);
  }

  return time.join('.');
}
$(document).ready(function() {
    app.init();
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
